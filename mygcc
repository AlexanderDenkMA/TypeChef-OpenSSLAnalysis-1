#!/bin/bash

ABSPATH=$(cd "$(dirname "$0")"; pwd)

echo ""
echo ""
echo "-=== ALL PARAMS ===-"
echo $@
echo ""
echo ""
echo "-=== FILTERED PARAMS ===-"
FILTEREDPARAMS=`$ABSPATH/filterargs $@`
FNAME=`$ABSPATH/filtername $@ | tr -d ' '`


echo $FILTEREDPARAMS
echo filename "$FNAME"

echo ""
echo ""
/usr/bin/gcc $@

# set output files
outBase="$(dirname $FNAME)/$(basename $FNAME .c)"
outDbg="$outBase.dbg"
outPartialPreproc="$outBase.pi"
outErr="$outBase.err"
outTime="$outBase.time"

# base parameters
baseParam="
	--bdd \
	-I /usr/local/include \
	-I /usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed \
	-I /usr/lib/gcc/x86_64-linux-gnu/4.6/include \
	-I /usr/include/x86_64-linux-gnu \
	-I /usr/include \
	--platfromHeader    $ABSPATH/platform.h \
	--openFeat          $ABSPATH/openfeatures.txt \
	--featureModelFExpr $ABSPATH/fm.txt \
	--typeSystemFeatureModelDimacs $ABSPATH/openssl.dimacs \
	--writePI $FILTEREDPARAMS \
	--include $ABSPATH/partial_configuration.h \
	--rootfolder /work/joliebig/"

# run typechef only in case we have a c file
if [[ -n $FNAME ]];
then

	# TypeChef resides next to TypeChef-<projectname> two levels up
	# create the serialized AST in the first run
	# apply sampling and family-based analysis for each strategy afterwards
	# in a single run
	$ABSPATH/../../TypeChef/typechefsampling.sh \
		$baseParam \
		--serializeAST \
		$FNAME \
		2> "$outErr" | tee -a "$outDbg"
	mv $outErr `basename  $outErr .err`_parsing.err
	mv $outDbg `basename  $outDbg .dbg`_parsing.dbg

	$ABSPATH/../../TypeChef/typechefsampling.sh \
		$baseParam \
		--reuseAST \
		--family \
		$FNAME \
		2> "$outErr" | tee -a "$outDbg"
	mv $outErr `basename  $outErr .err`_family.err
	mv $outDbg `basename  $outDbg .dbg`_family.dbg

	$ABSPATH/../../TypeChef/typechefsampling.sh \
		$baseParam \
		--reuseAST \
		--singleconf \
		$FNAME \
		2> "$outErr" | tee -a "$outDbg"
	mv $outErr `basename  $outErr .err`_singleconf.err
	mv $outDbg `basename  $outDbg .dbg`_singleconf.dbg

	$ABSPATH/../../TypeChef/typechefsampling.sh \
		$baseParam \
		--reuseAST \
		--pairwise \
		$FNAME \
		2> "$outErr" | tee -a "$outDbg"
	mv $outErr `basename  $outErr .err`_pairwise.err
	mv $outDbg `basename  $outDbg .dbg`_pairwise.dbg

	$ABSPATH/../../TypeChef/typechefsampling.sh \
		$baseParam \
		--reuseAST \
		--codecoverage \
		$FNAME \
		2> "$outErr" | tee -a "$outDbg"
	mv $outErr `basename  $outErr .err`_codecoverage.err
	mv $outDbg `basename  $outDbg .dbg`_codecoverage.dbg

	$ABSPATH/../../TypeChef/typechefsampling.sh \
		$baseParam \
		--reuseAST \
		--codecoveragenh \
		$FNAME \
		2> "$outErr" | tee -a "$outDbg"
	mv $outErr `basename  $outErr .err`_codecoveragenh.err
	mv $outDbg `basename  $outDbg .dbg`_codecoveragenh.dbg

	# create condensed report
	find . -type f -name "$FNAME*.vaareport" | xargs cat > $FNAME.vaareportall

	# remove unnecessary files
	bn=`basename $FNAME .c`
	dn=`dirname $FNAME`
	rm $dn/$bn.pi
fi

echo ""
echo ""
